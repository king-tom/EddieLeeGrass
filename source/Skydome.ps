////////////////////////////////////////////////////////////////////////////////
// Filename: skydome.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer GradientBuffer //: register(ps, cb0)
{
	float4 apexColor;// : packoffset(c0);
	float4 centerColor;// : packoffset(c1);
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float padding;
};

cbuffer LightBuffer : register(ps, cb2)
{
/*
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float padding;
	*/
	
	/*float4 ambientColor : packoffset(c2);
	float4 diffuseColor : packoffset(c3);
    float3 lightDirection : packoffset(c4);
	float padding : packoffset(c4.w);*/
	
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 domePosition : TEXCOORD0;
	float2 tex : TEXCOORD1;
	float3 normal : NORMAL;
	float4 color : COLOR;
};



////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 SkyDomePixelShader(PixelInputType input) : SV_TARGET
{
	float height;
	float4 outputColor;
	float4 textureColor;

	//float2 textureLocation = float2(0.5f - atan2(input.position.z, input.position.x)/2*3.14159, 0.5f - 2.0f*(asin(input.position.y/2)/2*3.14159));

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, float2(input.tex.x,input.tex.y*1.75));

	// Determine the position on the sky dome where this pixel is located.
	height = input.domePosition.y;

	// The value ranges from -1.0f to +1.0f so change it to only positive values.
	if(height < 0.0)
	{
		height = -0.0f;
	}

	// Determine the gradient color by interpolating between the apex and center based on the height of the pixel in the sky dome.
	outputColor = lerp(centerColor, apexColor, height);
	//outputColor = centerColor - (height);

	//return float4(input.tex.x,input.tex.y, input.position.z, 0.0f);// + diffuseColor;
	return textureColor;
    //return outputColor;
}
