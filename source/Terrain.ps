Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float3 cameraDirection;
	float2 cameraLocationXZ;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 color : COLOR;
	float4 lerpParam : POSITION;
};

float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;
	
	//static const float4 autumnTint = {0.8549f, 0.23137f, 0, 1};
	static const float4 autumn = {.8,.6,.8, 1};

    // Calculate the amount of light on this pixel.
    //lightIntensity = saturate( dot( input.normal, float3( lightDir.x,lightDir.y, lightDir.z) ) );

	/*if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }*/

    // Saturate the final light color.
    //color = saturate(color);

	// Multiply the texture pixel and the final light color to get the result.
    //color = (color * textureColor) * ((cameraDirection.x+cameraDirection.y+cameraDirection.z)/3);
	//color = input.cameraDirection;
    float4 finalColor = textureColor * cameraDirection.x * input.lerpParam;

	return finalColor;
}